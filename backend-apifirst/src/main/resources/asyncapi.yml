asyncapi: 2.6.0
info:
  title: Petstore Kafka API
  version: 1.0.0
  description: |-
    The Petstore kafka specification
defaultContentType: application/json

servers:
  docker-local:
    url: kafka://localhost:9092
    description: Docker local kafka server
    protocol: kafka


channels:
  savePetChannel:
    subscribe:
      operationId: savePet
      summary: >-
        Incoming pet save event
      message:
        messageId: savePetMessage
        name: savePet
        title: Pet save notification
        contentType: 'application/json'
        traits:
          - headers:
              type: object
              properties:
                my-app-header:
                    type: integer
                    minimum: 0
                    maximum: 100
        payload:
          $ref: '#/components/schemas/Pet'
        headers:
          type: object
          properties:
            pet-id:
              type: string





#channels:
#  savePetChannel:
#    address: pet.incoming.topic
#    messages:
#      savePetMessage:
#        $ref: '#/components/messages/savePetMessage'
#
#operations:
#  sendSavePetMessage:
#    action: send
#    channel:
#      $ref: '#/channels/savePetChannel'
#    summary: >-
#      Inform about incoming pet save
#    traits:
#      - bindings:
#          kafka:
#            clientId: true
#            groupId: true
#    messages:
#      - $ref: '#/channels/savePetChannel/messages/savePetMessage'


components:

#  messages:
#    savePetMessage:
#      name: savePetMessage
#      title: Save Pet Message
#      summary: >-
#        Send message for save pet
#      contentType: application/json
#      traits:
#        - $ref: '#/components/messageTraits/commonHeaders'
#      payload:
#        $ref: '#/components/schemas/Pet'

#  messageTraits:
#    commonHeaders:
#      headers:
#        type: object
#        properties:
#          my-app-header:
#            type: integer
#            minimum: 0
#            maximum: 100

  schemas:
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

